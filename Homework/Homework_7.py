################################################################################################################
# 1. Дано целое число (int). Определить сколько нулей в этом числе.

print('>exercise # 1<')

num_int = 23040500607000

my_str = str(num_int)
my_symbol = '0'

count = my_str.count(my_symbol)

print(count)
################################################################################################################
# 2. Дано целое число (int). Определить сколько нулей в конце этого числа. Например для числа 1002000 - три нуля

print('>exercice # 2<')

num = 23040500607000
num_str = str(num)

result = (len(num_str) - len(num_str.rstrip("0")))

print(result)
################################################################################################################
# 3. Даны списки my_list_1 и my_list_2.
# Создать список my_result в который вначале поместить
# элементы на четных местах из my_list_1, а потом все элементы на нечетных местах из my_list_2.

print('>exercice # 3<')

my_list_1 = [1, 3, 4, 34, 5645, 443, 306, ]
my_list_2 = [3, 23, 34, 12, 60, 80, ]

value_1 = my_list_1[::2]
value_2 = my_list_2[1::2]

my_result = value_1 + value_2

print(my_result)
################################################################################################################
# 4. Дан список my_list. СОЗДАТЬ НОВЫЙ список new_list у которого первый элемент из my_list
# стоит на последнем месте. Если my_list [1,2,3,4], то new_list [2,3,4,1]

print('>exercice # 4<')

my_list = [1, 2, 3, 4]

new_list = my_list[1:] + [my_list[0]]

print(new_list)
################################################################################################################
# 5. Дан список my_list. В ЭТОМ списке первый элемент переставить на последнее место.
# [1,2,3,4] -> [2,3,4,1]. Пересоздавать список нельзя! (используйте метод pop)

print('>exercice # 5<')

my_list = [1, 2, 3, 4]

value = my_list.pop(0)
my_list.append(value)

print(my_list)
################################################################################################################
# 6. Дана строка в которой есть числа (разделяются пробелами).
# Например "43 больше чем 34 но меньше чем 56". Найти сумму ВСЕХ ЧИСЕЛ (А НЕ ЦИФР) в этой строке.
# Для данного примера ответ - 133. (используйте split и проверку isdigit)

print('>exercice # 6<')

my_str = "43 больше чем 34 но меньше чем 56"

num_list = []

for number in my_str.split():
    if number.isdigit():
        num_list.append(int(number))
result = sum(num_list)

print(result)
################################################################################################################
# 7. Дана строка my_str в которой символы МОГУТ повторяться и два символа l_limit, r_limit,
# которые точно находятся в этой строке. Причем l_limit левее чем r_limit.
# В переменную sub_str поместить НАИБОЛЬШУЮ часть строки между этими символами.
# my_str = "My long string", l_limit = "o", r_limit = "g" -> sub_str = "ng strin".

print('>exercice # 7<')

my_str = "My long string"
l_limit = "o"
r_limit = "g"

result = my_str[my_str.find(l_limit) + 1: my_str.rfind(r_limit)]
print(f"sub_str = {result}")

################################################################################################################
# 8. Дана строка my_str. Разделите эту строку на пары из двух символов и поместите эти пары в список.
# Если строка содержит нечетное количество символов, пропущенный второй символ последней пары должен
# быть заменен подчеркиванием ('_'). Примеры: 'abcd' -> ['ab', 'cd'], 'abcde' -> ['ab', 'cd', e_']
# (используйте срезы длинны 2)

print('>exercice # 8<')

my_str = 'string'

my_list = list()

insert = my_str + '_' if len(my_str) % 2 else my_str

for index in range(0, len(insert), 2):
    my_list.append(insert[index:index + 2])

print(my_list)
################################################################################################################
# 9. Дан список чисел. Определите, сколько в этом списке элементов,
# которые больше суммы двух своих соседей (слева и справа), и НАПЕЧАТАЙТЕ КОЛИЧЕСТВО таких элементов.
# Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей.
# Для списка [2,4,1,5,3,9,0,7] ответом будет 3 потому что 4 > 2+1, 5 > 1+3, 9>3+0.

print('>exercice # 9<')

my_list = [2, 4, 1, 5, 3, 9, 0, 7, ]
result = 0

for index in range(1, len(my_list) - 1):
    if my_list[index] > my_list[index - 1] + my_list[index + 1]:
        result += 1

print(result)
################################################################################################################
# 10. Дан список my_list в котором могут быть как строки (type str) так и целые числа (type int).
# Например [1, 2, 3, "11", "22", 33]
# Создать новый список в который поместить только строки из my_list.

print('>exercice # 10<')

my_list = [1, 2, 3, "11", "22", 33, ]

result = [symbol for symbol in my_list if type(symbol) == str]

print(result)
################################################################################################################
# 11. Дана строка my_str. Создать список в который поместить те символы из my_str,
# которые встречаются в строке ТОЛЬКО ОДИН раз.

print('>exercice # 11<')

my_str = 'millenium'
my_list = []

for letter in set(my_str):
    if my_str.count(letter) == 1:
        my_list.append(letter)

print(my_list)
################################################################################################################
# 12. Даны две строки. Создать список в который поместить те символы,
# которые есть в обеих строках хотя бы раз.

print('>exercice # 12<')

my_str_1 = 'qwerty123'
my_str_2 = 'python_3.8'

my_set_1 = set(my_str_1)
my_set_2 = set(my_str_2)
result = list(my_set_1.intersection(my_set_2))

# result = list(set(my_str_1).intersection(set(my_str_2))) # short code

print(result)
################################################################################################################
# 13. Даны две строки. Создать список в который поместить те символы, которые есть в обеих строках,
# но в каждой ТОЛЬКО ПО ОДНОМУ разу.
# Пример: для строк "aaaasdf1" и "asdfff2" ответ ["s", "d"], т.к. эти символы есть в каждой строке по одному разу

print('>exercice # 13<')

my_str_1 = 'aaaasdf1'
my_str_2 = 'asdfff2'
my_list = []

my_set_1 = set(my_str_1)
my_set_2 = set(my_str_2)
inter_set = my_set_1.intersection(my_set_2)

for symbol in inter_set:
    if my_str_1.count(symbol) == 1 and my_str_2.count(symbol) == 1:
        my_list.append(symbol)

print(my_list)
